diff --git a/misi_hijau/game/common.py b/misi_hijau/game/common.py
index a180137..54de0b4 100644
--- a/misi_hijau/game/common.py
+++ b/misi_hijau/game/common.py
@@ -104,36 +104,102 @@ class LevelMap:
     level_height: int
     powerups_map: list[PowerUp]
 
+@dataclass
 class Level:
     """
     A level.
     """
-    def __init__(self, idx: int, levelmap: LevelMap, ship_type: PlayerShipType, enemy_type: EnemyType, mineral_type: MineralType, bullet_color: int, max_minerals: int, max_health: int):
+    idx: int
+    levelmap: LevelMap
+    ship_type: PlayerShipType
+    enemy_type: EnemyType
+    mineral_type: MineralType
+    bullet_color: int
+    enemies_statusbar_color: int
+    minerals_statusbar_color: int
+    max_minerals: int
+    max_health: int
+
+    minerals_all_collected = False
+    enemies_all_eliminated = False
+
+
+@dataclass
+class Icon:
+    """
+    Basic image from the spritesheet.
+    """
+    u: int 
+    v: int 
+    w: int
+    h: int
+
+class TextStatusbarItem:
+    """
+    String to be displayed at the statusbar.
+    """
+    def __init__(self, idx: int, function: Callable[[], str], color: int, custom_coords: bool = False, x: int = 0, y: int = 0):
         self.idx = idx
-        self.levelmap = levelmap
-        self.ship_type = ship_type
-        self.enemy_type = enemy_type
-        self.mineral_type = mineral_type
-        self.bullet_color = bullet_color
-        self.max_minerals = max_minerals
-        self.max_health = max_health
+        self.function = function # function that returns a string
+        self.color = color
+        self.custom_coords = custom_coords
+        self.x = x # only need to be set explicitly if custom_coords is enabled
+        self.y = y
+        self.string: str = ""
+
+    def update(self):
+        self.string = self.function()
 
-        self.minerals_all_collected = False
-        self.enemies_all_eliminated = False
+    def draw(self):
+        pyxel.text(self.x, self.y, self.string, self.color)
 
 @dataclass
-class StatusbarItem:
+class ProgressStatusbarItem:
     """
-    Item to be displayed in the statusbar.
+    A progress bar to be displayed at the statusbar.
     """
-    idx: int
-    function: Callable[[], str] # function that returns a string
-    color: int
-    update_interval: float = 1
-    custom_coords: bool = False
-    x: int = 0
-    y: int = 0
+    def __init__(self, 
+                idx: int,
+                max_val: int,
+                function: Callable[[], int],
+                border_col: int,
+                progress_col: int,
+                width: int,
+                height: int,
+                custom_coords: bool = False,
+                x: int = 0,
+                y: int = 0):
+
+        self.idx = idx
+        self.max_val = max_val
+        self.function = function
+        self.border_col = border_col
+        self.progress_col = progress_col
+        self.width = width
+        self.height = height
+        self.custom_coords = custom_coords
+        self.x = x
+        self.y = y
+        self.value: int = 0
+        self._calculate_pixels_per_val()
+
+    def new_max_val(self, max_val: int):
+        """
+        Set a new max value.
+        """
+        self.max_val = max_val
+        self._calculate_pixels_per_val()
+
+    def _calculate_pixels_per_val(self):
+        self.pixels_per_val = (self.width - 2) / self.max_val
+
+    def update(self):
+        self.value = self.function()
 
+    def draw(self):
+        pyxel.rectb(self.x, self.y, self.width, self.height, self.border_col) # border
+        pyxel.rect(self.x + 1, self.y + 1, self.value * self.pixels_per_val, self.height - 2, self.progress_col) # progress
+    
 class TimerItem:
     """
     A Timer item.
diff --git a/misi_hijau/game/components.py b/misi_hijau/game/components.py
index 55b2d90..673e6a4 100644
--- a/misi_hijau/game/components.py
+++ b/misi_hijau/game/components.py
@@ -29,7 +29,8 @@ from .common import (
     Sfx, 
     Level, 
     LevelMap,
-    StatusbarItem,
+    TextStatusbarItem,
+    ProgressStatusbarItem,
     TimerItem
 )
 
@@ -144,20 +145,20 @@ class GameStatusbar:
     # The `update` method calls all function and stores it in an array of strings, which will be drawn
     # with the `draw` method.
     def __init__(self):
-        self.items: list[StatusbarItem] = []
+        self.items: list[TextStatusbarItem | ProgressStatusbarItem] = []
         self.strings: list[str] = []
         self.def_x = pyxel.TILE_SIZE + 3
         self.def_y = 10
-        self.def_gap_y = 8
+        self.def_gap_y = 2
     
-    def append(self, items: list[StatusbarItem]):
+    def append(self, items: list[TextStatusbarItem | ProgressStatusbarItem]):
         """
         Append (extend) an array of `StatusBarItem` to the statusbar's store.
         """
         self.items.extend(items)
         self._recalculate_position()
     
-    def add(self, item: StatusbarItem):
+    def add(self, item: TextStatusbarItem | ProgressStatusbarItem):
         """
         Add a `StatusBarItem` to the statusbar's store.
         """
@@ -176,16 +177,16 @@ class GameStatusbar:
         Update statusbar strings (call all functions used to get the string).
         """
         
-        self.strings = [item.function() for item in self.items]
+        for item in self.items:
+            item.update()
 
     def draw(self):
         """
         Draw statusbar.
         """
-        if len(self.strings) > 0:
-            for i, item in enumerate(self.items):
-                string = self.strings[i]
-                pyxel.text(item.x, item.y, string, item.color)
+
+        for item in self.items:
+            item.draw()
         
     def _recalculate_position(self):
         """
@@ -194,14 +195,20 @@ class GameStatusbar:
         self.items = sorted(self.items, key=lambda x: x.idx)
         self.items[0].y = self.def_y
         self.items[0].x = self.def_x
+
         last_y = self.def_y
 
-        for item in self.items[1:]:
+        for item in self.items:
             if item.custom_coords:
                 continue
-            item.x = self.def_x
-            item.y = last_y + self.def_gap_y
-            last_y = item.y
+            if isinstance(item, TextStatusbarItem):
+                item.x = self.def_x
+                item.y = last_y + self.def_gap_y
+                last_y = item.y + pyxel.FONT_HEIGHT
+            if isinstance(item, ProgressStatusbarItem):
+                item.x = self.def_x
+                item.y = last_y + self.def_gap_y
+                last_y = item.y + item.height
 
 # Sound handling
 @dataclass
@@ -326,11 +333,11 @@ class GameSprites:
 
         return keybinds
     
-    def get_statusbars(self) -> list[StatusbarItem]:
+    def get_statusbars(self) -> list[TextStatusbarItem | ProgressStatusbarItem]:
         """
         Get an array of StatusbarItem from all sprites that can be plugged into `GameStatusBar`.
         """
-        statusbar_items: list[StatusbarItem] = []
+        statusbar_items: list[TextStatusbarItem | ProgressStatusbarItem] = []
 
         for sprite in self.sprites_handler:
             statusbar_items.extend(sprite.statusbar_items) if sprite.statusbar_items else None
diff --git a/misi_hijau/game/sprites/enemy.py b/misi_hijau/game/sprites/enemy.py
index 7c6b9a0..db49069 100644
--- a/misi_hijau/game/sprites/enemy.py
+++ b/misi_hijau/game/sprites/enemy.py
@@ -13,7 +13,7 @@
 # limitations under the License.
 
 import pyxel
-from ..common import ALPHA_COL, Level, BLANK_UV, MAP_Y_OFFSET_TILES, StatusbarItem, EnemyType
+from ..common import ALPHA_COL, Level, BLANK_UV, MAP_Y_OFFSET_TILES, ProgressStatusbarItem, EnemyType
 from ..utils import tile_to_real
 from .sprite_classes import Sprite, SpriteCoordinate, SpriteHandler
 from ..game_handler import GameHandler
@@ -93,11 +93,6 @@ class EnemySquidge(EnemyEntity):
 
 class EnemyHandler(SpriteHandler):
     def __init__(self, game_handler: GameHandler):
-
-        self.statusbar_items = [
-            StatusbarItem(2, self.get_enemy_count, pyxel.COLOR_WHITE, 2)
-        ]
-
         self.game_handler = game_handler
         self.enemies_ticker = self.game_handler.game_components.ticker.attach(8)
         self.game_components = game_handler.game_components
@@ -105,13 +100,18 @@ class EnemyHandler(SpriteHandler):
         self.enemies: list[EnemyEntity] = []
         self.setup()
 
+        self.enemies_hit_progressbar = ProgressStatusbarItem(2, self.enemies_count, self.get_enemy_count, pyxel.COLOR_WHITE, pyxel.COLOR_GREEN, 70, 8)
+
+        self.statusbar_items = [
+            self.enemies_hit_progressbar
+        ]
+
     def setup(self):
         self.level = self.game_handler.levelhandler.get_curr_lvl()
         self.levelmap = self.level.levelmap
         self.enemy_type = self.level.enemy_type
         self.enemies_eliminated = 0
         self.enemy_coordinates_list = self._generate_enemies_matrix()
-        self.statusbar_items[0].color = pyxel.COLOR_WHITE
         self.spawn()
 
     def _generate_enemies_matrix(self) -> list[tuple[int, int]]:
@@ -127,7 +127,7 @@ class EnemyHandler(SpriteHandler):
                 tile_type = tilemap.pget(x, y)
                 if tile_type == ENEMY_SPAWNER_UV:
                     enemies_matrix.append((x, y))
-        self.enemies_length = len(enemies_matrix)
+        self.enemies_count = len(enemies_matrix)
         return enemies_matrix
 
     def spawn(self):
@@ -168,9 +168,9 @@ class EnemyHandler(SpriteHandler):
                     self.enemies_eliminated += 1
                     self.game_components.event_handler.trigger_event(events.UpdateStatusbar)
 
-                    if self.enemies_eliminated == self.enemies_length:
+                    if self.enemies_eliminated == self.enemies_count:
                         self.level.enemies_all_eliminated = True
-                        self.statusbar_items[0].color = pyxel.COLOR_LIME
+                        self.enemies_hit_progressbar.progress_col = pyxel.COLOR_LIME
                         self.game_components.event_handler.trigger_event(events.CheckLevelComplete)
                 
                 self.game_components.event_handler.trigger_event(events.PlayerCollidingEnemy(enemy.coord.x, enemy.coord.y, enemy.w, enemy.h))
@@ -188,12 +188,14 @@ class EnemyHandler(SpriteHandler):
     def init_level(self):
         self.enemies = []
         self.setup()
+        self.enemies_hit_progressbar.new_max_val(self.enemies_count)
 
     def restart_level(self):
-        self.statusbar_items[0].color = pyxel.COLOR_WHITE
+        self.enemies_hit_progressbar.max_val = self.enemies_count
+        # self.enemies_hit_progressbar.progress_col = self.
         self.enemies = []
         self.enemies_eliminated = 0
         self.spawn()
 
-    def get_enemy_count(self) -> str:
-        return f"Alien lenyap: {self.enemies_eliminated:>2} / {self.enemies_length}"
\ No newline at end of file
+    def get_enemy_count(self) -> int:
+        return self.enemies_eliminated
\ No newline at end of file
diff --git a/misi_hijau/game/sprites/flag.py b/misi_hijau/game/sprites/flag.py
index 30b17de..f284c28 100644
--- a/misi_hijau/game/sprites/flag.py
+++ b/misi_hijau/game/sprites/flag.py
@@ -38,6 +38,6 @@ class LevelFlag(TilemapBasedSprite):
     def restart_level(self):
         self.setup()
 
-    def player_level_completed_check(self, uv: tuple[int, int], tile_x: int, tile_y: int):
+    def player_level_completed_check(self, uv: tuple[int, int], tile_x: int, tile_y: int): # FIXME: Some functions still call this function with these arguments. If one removes them, breakage will occur. Refactoring should be done later
         if self._is_level_complete() and uv == self.FLAG_UV:
             self.game_handler.game_components.event_handler.trigger_event(events.LevelNext)
diff --git a/misi_hijau/game/sprites/minerals.py b/misi_hijau/game/sprites/minerals.py
index daf8d11..7389117 100644
--- a/misi_hijau/game/sprites/minerals.py
+++ b/misi_hijau/game/sprites/minerals.py
@@ -15,7 +15,7 @@
 from .sprite_classes import TilemapBasedSprite
 from ..game_handler import GameHandler
 from .. import events
-from ..common import MineralType, Sfx, SoundType, StatusbarItem, BLANK_UV, MAP_Y_OFFSET_TILES
+from ..common import MineralType, Sfx, SoundType, TextStatusbarItem, BLANK_UV, MAP_Y_OFFSET_TILES
 import pyxel
 
 class MineralsHandler(TilemapBasedSprite):
@@ -32,7 +32,7 @@ class MineralsHandler(TilemapBasedSprite):
 
     def __init__(self, game_handler: GameHandler):
         self.statusbar_items = [
-            StatusbarItem(1, self.get_minerals_count, pyxel.COLOR_WHITE)
+            TextStatusbarItem(1, self.get_minerals_count, pyxel.COLOR_WHITE)
         ]
 
         self.mineral_coordinates_list: list[tuple[int, int]] = []
diff --git a/misi_hijau/game/sprites/player.py b/misi_hijau/game/sprites/player.py
index eaa84b5..2a5db59 100644
--- a/misi_hijau/game/sprites/player.py
+++ b/misi_hijau/game/sprites/player.py
@@ -24,7 +24,7 @@ from ..common import (
     Sfx,
     SoundType,
     KeyTypes,
-    StatusbarItem,
+    TextStatusbarItem,
     MAP_Y_OFFSET_TILES
 )
 from ..game_handler import GameHandler
@@ -320,7 +320,7 @@ class PlayerHandler(SpriteHandler):
             "player_shoot": KeyFunc([pyxel.KEY_SPACE], self.shoot_handler, KeyTypes.BTNP, hold_time=10, repeat_time=10, active=False),
         }
         self.statusbar_items = [
-            StatusbarItem(100, self.get_player_speed, pyxel.COLOR_YELLOW),
+            TextStatusbarItem(100, self.get_player_speed, pyxel.COLOR_YELLOW),
         ]
 
     def enable_player_keys(self):
diff --git a/misi_hijau/game/sprites/sprite_classes.py b/misi_hijau/game/sprites/sprite_classes.py
index 1c4d6e9..98cccad 100644
--- a/misi_hijau/game/sprites/sprite_classes.py
+++ b/misi_hijau/game/sprites/sprite_classes.py
@@ -42,7 +42,7 @@ class Sprite(ABC):
     coord: SpriteCoordinate = SpriteCoordinate(-20, -20, -20, -20)
     colkey: Optional[int]
     keybindings: dict[str, common.KeyFunc] = {}
-    statusbar_items: list[common.StatusbarItem] = []
+    statusbar_items: list[common.TextStatusbarItem | common.ProgressStatusbarItem] = []
     soundbank: dict[str, common.Sfx] = {}
     costumes: dict[str, tuple[int, int]] = {}
 
@@ -91,7 +91,7 @@ class SpriteHandler(ABC):
 
     keybindings: dict[str, common.KeyFunc] = {}
     soundbank: dict[str, common.Sfx] = {}
-    statusbar_items: list[common.StatusbarItem] = []
+    statusbar_items: list[common.TextStatusbarItem | common.ProgressStatusbarItem] = []
 
     @abstractmethod
     def draw(self):
@@ -130,7 +130,7 @@ class TilemapBasedSprite(ABC):
     keybindings: dict[str, common.KeyFunc] = {}
     soundbank: dict[str, common.Sfx] = {}
     costumes: dict[str, tuple[int, int]] = {}
-    statusbar_items: list[common.StatusbarItem] = []
+    statusbar_items: list[common.TextStatusbarItem | common.ProgressStatusbarItem] = []
 
     @abstractmethod
     def init_level(self):
diff --git a/misi_hijau/res/levels.py b/misi_hijau/res/levels.py
index b9781c3..ed43f66 100644
--- a/misi_hijau/res/levels.py
+++ b/misi_hijau/res/levels.py
@@ -54,7 +54,7 @@ map_3 = LevelMap(map_3_x, map_3_y, map_3_width, map_3_height, [])
 
 # Create list of levels
 levels: list[Level] = [
-    Level(1, map_1, PlayerShipType.SHIP1, EnemyType.ENEMY_1, MineralType.MINERAL_1, pyxel.COLOR_LIME, 14, 3),
-    Level(2, map_2, PlayerShipType.SHIP2, EnemyType.ENEMY_2, MineralType.MINERAL_2, pyxel.COLOR_CYAN, 20, 4),
-    Level(3, map_2, PlayerShipType.SHIP3, EnemyType.ENEMY_3, MineralType.MINERAL_3, pyxel.COLOR_GRAY, 35, 5) # ship doesn't have flame
+    Level(1, map_1, PlayerShipType.SHIP1, EnemyType.ENEMY_1, MineralType.MINERAL_1, pyxel.COLOR_LIME, pyxel.COLOR_LIME, pyxel.COLOR_LIGHT_BLUE, 14, 3),
+    Level(2, map_2, PlayerShipType.SHIP2, EnemyType.ENEMY_2, MineralType.MINERAL_2, pyxel.COLOR_CYAN, pyxel.COLOR_RED, pyxel.COLOR_PINK, 20, 4),
+    Level(3, map_2, PlayerShipType.SHIP3, EnemyType.ENEMY_3, MineralType.MINERAL_3, pyxel.COLOR_GRAY, pyxel.COLOR_PINK, pyxel.COLOR_YELLOW, 35, 5) # ship doesn't have flame
 ]
\ No newline at end of file
diff --git a/misi_hijau/res/res.pyxres b/misi_hijau/res/res.pyxres
index b306557..fb3e7bf 100644
Binary files a/misi_hijau/res/res.pyxres and b/misi_hijau/res/res.pyxres differ
diff --git a/poetry.lock b/poetry.lock
index 3167aa0..ec17966 100644
--- a/poetry.lock
+++ b/poetry.lock
@@ -82,19 +82,19 @@ tests = ["check-manifest", "coverage", "defusedxml", "markdown2", "olefile", "pa
 
 [[package]]
 name = "pyxel"
-version = "1.9.14"
+version = "1.9.15"
 description = "A retro game engine for Python"
 category = "main"
 optional = false
-python-versions = ">=3.7"
+python-versions = ">= 3.7"
 files = [
-    {file = "pyxel-1.9.14-cp37-abi3-macosx_10_7_x86_64.whl", hash = "sha256:2284368b1960fdacedfe6930be0d53f9159453dde23902047beb96f4856b7886"},
-    {file = "pyxel-1.9.14-cp37-abi3-macosx_11_0_arm64.whl", hash = "sha256:14e57bc068625333f02386b45f0be04ac9a1678cb665bb4901231791eb7f901f"},
-    {file = "pyxel-1.9.14-cp37-abi3-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:ce350019fd3a55f5bfe52da259c52cc326589e811bb652b179f433373257a7f8"},
-    {file = "pyxel-1.9.14-cp37-abi3-manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:0d1409eaee1a5a8572affb416869cd2c8fc7232f6d6e9bdc53f6547224089690"},
-    {file = "pyxel-1.9.14-cp37-abi3-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:2538b049732e76edc493fbcfa0932e771b1fd7a9b651b1b1c953e64c2669effc"},
-    {file = "pyxel-1.9.14-cp37-abi3-win32.whl", hash = "sha256:b48b8ae9a48932531cade9be91b4a3d1ba845143050786ffe7de373986c9e735"},
-    {file = "pyxel-1.9.14-cp37-abi3-win_amd64.whl", hash = "sha256:6378961f7269232248abfb2ecfe2a61ecdf3372c4bf18995e2f19e2b476aa5a6"},
+    {file = "pyxel-1.9.15-cp37-abi3-macosx_10_12_x86_64.whl", hash = "sha256:881539db9250c2b9564104f73466e8e838986f1633fdf537de8f0b31657ccf8e"},
+    {file = "pyxel-1.9.15-cp37-abi3-macosx_11_0_arm64.whl", hash = "sha256:a70f5fb910f5c726ad1654e5debc11a7b239f168b563cf5253a58560e2aa127d"},
+    {file = "pyxel-1.9.15-cp37-abi3-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:41c930a0c1355af2101badb47403dee5fafba3a4685ab449a9e13b87b056dab1"},
+    {file = "pyxel-1.9.15-cp37-abi3-manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:a24cda9ef4d3a223555839ffbffc851c1c5443ba9d739fc3fa972204f2e11e85"},
+    {file = "pyxel-1.9.15-cp37-abi3-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:8d72302b6739fcdaac124c5b4ff531ed72c547eaa17167658a3d92150076dc1e"},
+    {file = "pyxel-1.9.15-cp37-abi3-win32.whl", hash = "sha256:74df05f419efc8d668351fc6fb5e05940ccf526200046f92fff1ae97c2bb63aa"},
+    {file = "pyxel-1.9.15-cp37-abi3-win_amd64.whl", hash = "sha256:d73851da4827c60fbb84b2e78cf0c606e65e22061bc757ffb85428c5545a3eb4"},
 ]
 
 [[package]]
